//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"RunIntToQubitTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"testNum\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":16}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"RunIntToQubitTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"runAdderTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":40,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"num1\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":28}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"num2\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":39}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"runAdderTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":40,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"IntToQubitTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":85,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"IntToQubitTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"fullAdderTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":94,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":95,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"fullAdderTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":95,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"adderTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":138,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":139,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"adderTest\"},\"Attributes\":[],\"SourceFile\":\"/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs\",\"Position\":{\"Item1\":139,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
#line hidden
namespace Lab9
{
    [SourceLocation("/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs", OperationFunctor.Body, 21, 41)]
    public partial class RunIntToQubitTest : Operation<Int64, QVoid>, ICallable
    {
        public RunIntToQubitTest(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RunIntToQubitTest";
        String ICallable.FullName => "Lab9.RunIntToQubitTest";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Lg
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), QVoid> intToQubits__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        public override Func<Int64, QVoid> __Body__ => (__in__) =>
        {
            var testNum = __in__;
#line 25 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            var numBits = Microsoft__Quantum__Math__Ceiling.Apply(Microsoft__Quantum__Math__Lg.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply((testNum + 1L))));
#line hidden
            {
#line 26 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                var reg = Allocate__.Apply(numBits);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 28 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    intToQubits__.Apply((testNum, reg));
#line 29 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    var measured = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(reg));
#line 31 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Reset__, reg));
#line 33 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    if ((measured != testNum))
                    {
#line 34 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                        throw new ExecutionFailException("measured integer is incorrect");
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(reg);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Lg = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Lg));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.intToQubits__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Qubit>), QVoid>>(typeof(intToQubits));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 testNum)
        {
            return __m__.Run<RunIntToQubitTest, Int64, QVoid>(testNum);
        }
    }

    [SourceLocation("/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs", OperationFunctor.Body, 41, 87)]
    public partial class runAdderTest : Operation<(Int64,Int64), Int64>, ICallable
    {
        public runAdderTest(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "runAdderTest";
        String ICallable.FullName => "Lab9.runAdderTest";
        protected ICallable<IQArray<Int64>, Int64> Microsoft__Quantum__Math__Max
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Lg
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), QVoid> intToQubits__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> adder__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (num1,num2) = __in__;
#line 44 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            var maxVal = Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(num1, num2));
#line 45 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            var numBits = 0L;
#line 48 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            if ((maxVal == 0L))
            {
#line 49 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                numBits = 1L;
            }
            else
            {
#line 52 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                numBits = Microsoft__Quantum__Math__Ceiling.Apply(Microsoft__Quantum__Math__Lg.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply((maxVal + 1L))));
            }

#line hidden
            {
#line 55 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                var reg1 = Allocate__.Apply(numBits);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 56 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                        var reg2 = Allocate__.Apply(numBits);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 59 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                var res = Allocate__.Apply(numBits);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line hidden
                                    {
#line 60 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                        var carry = Allocate__.Apply(numBits);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 63 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            intToQubits__.Apply((num1, reg1));
#line 64 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            intToQubits__.Apply((num2, reg2));
#line 67 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            adder__.Apply((reg1, reg2, res, carry));
#line 70 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            var totalSum = (IQArray<Qubit>)QArray<Qubit>.Add(res, new QArray<Qubit>(carry[(carry.Length - 1L)]));
#line 72 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            var intSum = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(totalSum));
#line 75 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Reset__, reg1));
#line 76 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Reset__, reg2));
#line 77 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Reset__, res));
#line 78 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Reset__, carry));
#line 81 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                            return intSum;
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(carry);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(res);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(reg2);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(reg1);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Max = this.__Factory__.Get<ICallable<IQArray<Int64>, Int64>>(typeof(global::Microsoft.Quantum.Math.Max));
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Lg = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Lg));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.intToQubits__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Qubit>), QVoid>>(typeof(intToQubits));
            this.adder__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(adder));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 num1, Int64 num2)
        {
            return __m__.Run<runAdderTest, (Int64,Int64), Int64>((num1, num2));
        }
    }

    [SourceLocation("/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs", OperationFunctor.Body, 87, 96)]
    public partial class IntToQubitTest : Operation<QVoid, QVoid>, ICallable
    {
        public IntToQubitTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "IntToQubitTest")]
            public void IntToQubitTest()
#line 87 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<IntToQubitTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 87 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "IntToQubitTest";
        String ICallable.FullName => "Lab9.IntToQubitTest";
        protected ICallable<Int64, QVoid> RunIntToQubitTest__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 88 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            RunIntToQubitTest__.Apply(0L);
#line 89 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            RunIntToQubitTest__.Apply(5L);
#line 90 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            RunIntToQubitTest__.Apply(273L);
#line 91 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            RunIntToQubitTest__.Apply(1024L);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.RunIntToQubitTest__ = this.__Factory__.Get<ICallable<Int64, QVoid>>(typeof(RunIntToQubitTest));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<IntToQubitTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs", OperationFunctor.Body, 96, 140)]
    public partial class fullAdderTest : Operation<QVoid, QVoid>, ICallable
    {
        public fullAdderTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "fullAdderTest")]
            public void fullAdderTest()
#line 96 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<fullAdderTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 96 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "fullAdderTest";
        String ICallable.FullName => "Lab9.fullAdderTest";
        protected ICallable<(Int64,Int64), IQArray<Boolean>> Microsoft__Quantum__Convert__IntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean), Boolean> Microsoft__Quantum__Logical__Xor
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), QVoid> intToQubits__
        {
            get;
            set;
        }

        protected ICallable<(Qubit,Qubit,Qubit,Qubit,Qubit), QVoid> fullAdder__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 99 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            foreach (var i in new QRange(0L, 7L))
#line hidden
            {
#line 100 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                var arr = (IQArray<Boolean>)Microsoft__Quantum__Convert__IntAsBoolArray.Apply((i, 3L));
#line 101 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                var a = arr[0L];
#line 102 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                var b = arr[1L];
#line 103 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                var cin = arr[2L];
#line 106 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                var trueSum = Microsoft__Quantum__Logical__Xor.Apply((cin, Microsoft__Quantum__Logical__Xor.Apply((a, b))));
#line 107 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                var trueCout = ((a && b) || (Microsoft__Quantum__Logical__Xor.Apply((a, b)) && cin));
#line hidden
                {
#line 110 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    var inputReg = Allocate__.Apply(3L);
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line hidden
                        {
#line 111 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                            var outputReg = Allocate__.Apply(2L);
#line hidden
                            bool __arg2__ = true;
                            try
                            {
#line 112 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                intToQubits__.Apply((i, inputReg));
#line 115 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                fullAdder__.Apply((inputReg[0L], inputReg[1L], inputReg[2L], outputReg[0L], outputReg[1L]));
#line 118 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                var resSum = (Microsoft__Quantum__Intrinsic__M.Apply(outputReg[0L]) == Result.One);
#line 119 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                var resCout = (Microsoft__Quantum__Intrinsic__M.Apply(outputReg[1L]) == Result.One);
#line 122 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                Microsoft__Quantum__Canon__ApplyToEach.Apply((Reset__, inputReg));
#line 123 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                Microsoft__Quantum__Canon__ApplyToEach.Apply((Reset__, outputReg));
#line 126 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                if ((resSum != trueSum))
                                {
#line 127 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                    throw new ExecutionFailException("sum is incorrect \n");
                                }

#line 130 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                if ((resCout != trueCout))
                                {
#line 131 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                                    throw new ExecutionFailException("carry-out is incorrect \n");
                                }
                            }
#line hidden
                            catch
                            {
                                __arg2__ = false;
                                throw;
                            }
#line hidden
                            finally
                            {
                                if (__arg2__)
                                {
#line hidden
                                    Release__.Apply(outputReg);
                                }
                            }
                        }
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(inputReg);
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__IntAsBoolArray = this.__Factory__.Get<ICallable<(Int64,Int64), IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.IntAsBoolArray));
            this.Microsoft__Quantum__Logical__Xor = this.__Factory__.Get<ICallable<(Boolean,Boolean), Boolean>>(typeof(global::Microsoft.Quantum.Logical.Xor));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.intToQubits__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Qubit>), QVoid>>(typeof(intToQubits));
            this.fullAdder__ = this.__Factory__.Get<ICallable<(Qubit,Qubit,Qubit,Qubit,Qubit), QVoid>>(typeof(fullAdder));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<fullAdderTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs", OperationFunctor.Body, 140, -1)]
    public partial class adderTest : Operation<QVoid, QVoid>, ICallable
    {
        public adderTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "adderTest")]
            public void adderTest()
#line 140 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<adderTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 140 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "adderTest";
        String ICallable.FullName => "Lab9.adderTest";
        protected ICallable<(Int64,Int64), Int64> runAdderTest__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 142 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
            foreach (var i in new QRange(0L, 20L))
#line hidden
            {
#line 143 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                foreach (var j in new QRange(0L, 20L))
#line hidden
                {
#line 145 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    var trueSum = (i + j);
#line 146 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    var adderSum = runAdderTest__.Apply((i, j));
#line 148 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                    if ((trueSum != adderSum))
                    {
#line 149 "/Users/khaledkamal/Documents/ee193-quantum/finalProject/Lab9Tests.qs"
                        throw new ExecutionFailException(String.Format("{0} + {1} sum is incorrect: got {2}, expected {3}\n", i, j, adderSum, trueSum));
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.runAdderTest__ = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(runAdderTest));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<adderTest, QVoid, QVoid>(QVoid.Instance);
        }
    }
}